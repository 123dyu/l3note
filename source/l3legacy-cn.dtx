% \iffalse meta-comment
%
%% File: l3legacy-cn.dtx
%
% Copyright (C) 2023 by Yu Du <3531243657@qq.com>
% 
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either
% version 1.3c of this license or (at your option) any later
% version. The latest version of this license is in:
% 
%   http://www.latex-project.org/lppl.txt
% 
% and version 1.3 or later is part of all distributions of
% LaTeX version 2005/12/01 or later. 
%
%<*driver>
\documentclass[full,kernel]{l3doc}
\usepackage{ctex}
\input{../set/codeset.tex}
\input{../set/indexset.tex}
\ExplSyntaxOn
\legacy_if_set_true:n{legacy}
\ExplSyntaxOff
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \iflegacy
% \def\temp{宏包}
% \else
% \def\temp{模块}
% \fi
%
% \title{^^A
%   \textsf{l3legacy}\temp ——\textbf{遗留概念接口}^^A
% }
%
% \author{^^A
%  \LaTeX{}项目组【著】\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }\\
%  dyu【译】\thanks{E-mail: 3531243657@qq.com}
% }
%
% \date{分发于2023-11-09}
%
% \maketitle
%
% \begin{documentation}
%
% 有少量\TeX{}或\LaTeXe{}中的概念在\pkg{expl3}代码中不在使用，但在某些情况下仍会用到它们，为满足这种需求，该模块提供了一组接口用以使用这些遗留概念。
%
% 在\LaTeXe{}/plain \TeX{}中，有这样一个用来创建条件控制命令的命令：
%
% \begin{latexsyntax}[gobble=4]
%   \newif\if(*\meta{条件}*)
% \end{latexsyntax}
%   该命令定义了一个名为\meta{条件}的布尔寄存器和一个\tn{if\meta{条件}}（\meta{条件}可用任意字母串命名）条件控制命令，并且还自动定义了\tn{\meta{条件}true}和\tn{\meta{条件}false}命令，它们分别用于设置\meta{条件}布尔寄存器的值为真或假，默认值为假。
%   
% 下面几个函数则是针对上述概念而给出的接口：
%
% \begin{function}[pTF]{\legacy_if:n}
%   \begin{syntax}
%     \cs{legacy_if_p:n} \Arg{条件}
%     \cs{legacy_if:nTF} \Arg{条件} \Arg{条件为真时执行的代码} \Arg{条件为假时执行的代码}
%   \end{syntax}
%   判断\meta{条件}的真假并执行相应的操作。具体来说就是：
%   \begin{itemize}
%     \item 谓词函数：如果\meta{条件}为真，则返回\cs{c_true_bool}，反之返回\cs{c_false_bool}。 
%     \item 条件函数：如果\meta{条件}为真，则执行条件为真时的代码，反之则执行条件为假时的代码。其相当于是：\tn{if\meta{条件}}~\meta{肯定语句}~\tn{else}~\meta{否定语句}~\tn{fi}。
%   \end{itemize}
%   这一系列函数的定义如下：
% \end{function}
% \begin{latexsyntax}[gobble=4,rulecolor=\color{yellow}]
%   \prg_new_conditional:Npnn \legacy_if:n #1 { p , T , F , TF }
%     {
%       \exp_after:wN \reverse_if:N
%         \cs:w if#1 \cs_end:
%         \prg_return_false:
%       \else:
%         \prg_return_true:
%       \fi:
%     }
% \end{latexsyntax}
% 
% \begin{function}[added = 2021-05-10]
%   {
%     \legacy_if_set_true:n, \legacy_if_set_false:n, 
%     \legacy_if_gset_true:n, \legacy_if_gset_false:n
%   }
%   \begin{syntax}
%     \cs{legacy_if_set_true:n} \Arg{条件}
%     \cs{legacy_if_set_false:n} \Arg{条件}
%     \cs{legacy_if_gset_true:n} \Arg{条件}
%     \cs{legacy_if_gset_false:n} \Arg{条件}
%   \end{syntax}
%   局部（set）或全局（gset）地将\tn{if\meta{条件}}设置为\tn{iftrue}或\tn{iffalse}。这几个函数的定义如下：
% \end{function}
% \begin{latexsyntax}[gobble=4,rulecolor=\color{yellow}]
%   \cs_new_protected:Npn \legacy_if_set_true:n #1
%     { \cs_set_eq:cN { if#1 } \if_true: }
%   \cs_new_protected:Npn \legacy_if_set_false:n #1
%     { \cs_set_eq:cN { if#1 } \if_false: }
%   \cs_new_protected:Npn \legacy_if_gset_true:n #1
%     { \cs_gset_eq:cN { if#1 } \if_true: }
%   \cs_new_protected:Npn \legacy_if_gset_false:n #1
%     { \cs_gset_eq:cN { if#1 } \if_false: }
% \end{latexsyntax}
% 
% \begin{function}[added = 2021-05-10]{\legacy_if_set:nn, \legacy_if_gset:nn}
%   \begin{syntax}
%     \cs{legacy_if_set:nn} \Arg{条件} \Arg{布尔表达式}
%     \cs{legacy_if_gset:nn} \Arg{条件} \Arg{布尔表达式}
%   \end{syntax}
%   根据\meta{布尔表达式}值的真假将\tn{if\meta{条件}}局部（set）或全局（gset）地设置为 \tn{iftrue} 或 \tn{iffalse} 。这两个函数的定义如下：
% \end{function}
% \begin{latexsyntax}[gobble=4,rulecolor=\color{yellow}]
%   \cs_new_protected:Npn \legacy_if_set:nn #1#2
%     {
%       \bool_if:nTF {#2} \legacy_if_set_true:n \legacy_if_set_false:n
%       {#1}
%     }
%   \cs_new_protected:Npn \legacy_if_gset:nn #1#2
%     {
%       \bool_if:nTF {#2} \legacy_if_gset_true:n \legacy_if_gset_false:n
%       {#1}
%     }
% \end{latexsyntax}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3legacy}实现原理}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=legacy>
%    \end{macrocode}
%
% \begin{macro}[EXP,pTF]{\legacy_if:n}
% 一个友好的封装。
%^^A 在这里，我们需要使用\cs{if:w}，而不是测试
%^^A \tn{iftrue}/\tn{iffalse}，因为后者对于\tn{ifmmode}等原始条件会失效。
% 这里的\cs{reverse_if:N}意味着如果\meta{条件}名未定义，会得到一个稍微有用的错误提示。
%^^A  A friendly wrapper. We need to use the \cs{if:w} approach here, rather than
%^^A testing against \tn{iftrue}/\tn{iffalse} as the latter approach fails for
%^^A  primitive conditionals such as \tn{ifmmode}. The \cs{reverse_if:N} here
%^^A  means that we get a slightly more useful error if the name is undefined.
%    \begin{macrocode}
\prg_new_conditional:Npnn \legacy_if:n #1 { p , T , F , TF }
  {
    \exp_after:wN \reverse_if:N
      \cs:w if#1 \cs_end:
      \prg_return_false:
    \else:
      \prg_return_true:
    \fi: 
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \legacy_if_set_true:n, \legacy_if_set_false:n,
%     \legacy_if_gset_true:n, \legacy_if_gset_false:n
%   }
%   一个友好的(friendly)封装。
%    \begin{macrocode}
\cs_new_protected:Npn \legacy_if_set_true:n #1
  { \cs_set_eq:cN { if#1 } \if_true: }
\cs_new_protected:Npn \legacy_if_set_false:n #1
  { \cs_set_eq:cN { if#1 } \if_false: }
\cs_new_protected:Npn \legacy_if_gset_true:n #1
  { \cs_gset_eq:cN { if#1 } \if_true: }
\cs_new_protected:Npn \legacy_if_gset_false:n #1
  { \cs_gset_eq:cN { if#1 } \if_false: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\legacy_if_set:nn, \legacy_if_gset:nn}
%   一个更详细(elaborate)的封装。
%    \begin{macrocode}
\cs_new_protected:Npn \legacy_if_set:nn #1#2
  {
    \bool_if:nTF {#2} \legacy_if_set_true:n \legacy_if_set_false:n
    {#1}
  }
\cs_new_protected:Npn \legacy_if_gset:nn #1#2
  {
    \bool_if:nTF {#2} \legacy_if_gset_true:n \legacy_if_gset_false:n
    {#1}
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
